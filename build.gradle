/*
 * This is a Gradle composite build, which reuses the nested packer-* build
 * projects. It is intended to be called from a dedicated build platform, such
 * as Jenkins or TravisCI.
 *
 * https://docs.gradle.org/current/userguide/composite_builds.html
 */
plugins {
  // https://plugins.gradle.org/plugin/com.dorongold.task-tree
  id "com.dorongold.task-tree" version "1.4"
}



// optional configuration
taskTree{
    noRepeat = false  //do not print a sub-tree in the task-tree more than once
    impliesSubProjects = false  //do not print task-tree for child projects in a multi-project
    // taskDepth = 3 // limit tree depth to 3. Equivalent to running with the --task-depth option.
}
def defaulImgActions = ['clean', 'build', 'test', 'push']
def defaultOses = ['rhel8.0', 'rhel7.6', 'centos7.6', 'ubuntu18.04', 'ubuntu16.04']
def imgList = [
    'nodejs': [
        'oses': ['rhel7.6', 'centos7.6', 'ubuntu18.04', 'ubuntu16.04'],
        'children': [
            'cloudsploit': [
                'oses': ['rhel7.6', 'centos7.6', 'ubuntu18.04', 'ubuntu16.04'],
            ]
        ]
     ],
    'python3': [
        'oses': 'all',
        'children': [
            'pacu': [
                'oses': 'all',
            ],
            'prowler': [
                'oses': 'all',
            ],
        ]
    ],
    'ruby': [
        'oses': 'all',
    ],
    'openjdk': [
        'oses': 'all',
    ]
]

// http://www.java2novice.com/gradle/dynamic-tasks/
// http://www.groovy-lang.org/groovy-dev-kit.html#_iterating_on_maps
// https://stackoverflow.com/questions/28180151/call-zip-task-multiple-times-in-gradle






for(action in defaulImgActions){
    // create tasks for the base images
    task("${action}BaseImages") {
        imgList.each { id, val ->
            def idCapitalized = id.capitalize()
            dependsOn "$action$idCapitalized"
        }
    }
    // create tasks for the children images
    task("${action}ChildImages") {
        imgList.each { key, val ->
            if (val.containsKey('children')) {
                val['children'].each { id, val2 ->
                    def idCapitalized = id.capitalize()
                    dependsOn "${action}${idCapitalized}"
                }
            }
        }
    }
}
for(a in imgList){
    def imgId = a.key
    def val = a.value
    def idCapitalized = imgId.capitalize()
    // create tasks to test the top-level images
    for(action in defaulImgActions){
        task("${action}${idCapitalized}") {
            def osList = defaultOses
            if (val['oses'] != 'all') {
                osList = val['oses']
            }
            for(osId in osList){
                dependsOn gradle.includedBuild("packer-${imgId}").task(":gradle-build:${osId}:${action}")
            }
        }
    }
    // create tasks for child images
    if (val.containsKey('children')){
        // def parentIdCapitalized = imgId.capitalize()
        for(e in val['children']) {
            def childIdCapitalized = e.key.capitalize()
            def imgId2 = e.key
            for(action in defaulImgActions){
                task("${action}${childIdCapitalized}", type: GradleBuild) {
                    // dependsOn "$action$idCapitalized"
                    // mustRunAfter "$action$idCapitalized"
                    def osList = defaultOses
                    if (e.value['oses'] != 'all') {
                        osList = e.value['oses']
                    }
                    for(osId in osList){
                        dependsOn gradle.includedBuild("packer-${imgId2}").task(":gradle-build:${osId}:${action}")
                    }
                }
            }
        }
    }
}

/**
* @function printAllMethods
* @purpose Prints an objects class name and then list the associated class functions.
*/
void printAllMethods( obj ){
    if( !obj ){
        println( "Object is null\r\n" );
        return;
    }
    if( !obj.metaClass && obj.getClass() ){
        printAllMethods( obj.getClass() );
        return;
    }
    def str = "class ${obj.getClass().name} functions:\r\n";
    obj.metaClass.methods.name.unique().each{ 
        str += it+"(); "; 
    }
    println "${str}\r\n";
}
